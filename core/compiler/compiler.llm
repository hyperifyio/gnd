The Gendo compiler is responsible for transforming Gendo source code into executable bytecode.
It performs six passes: gather, tokenise, parse, verify, resolve, and serialise.

Dependencies:
- core.primitive.file_read: Read source files
- core.primitive.file_list: List directory contents
- core.primitive.string_split: Split source into lines
- core.primitive.string_match: Match patterns in source
- core.primitive.tokenise: Convert source to tokens
- core.primitive.list_map: Transform lists of tokens
- core.primitive.list_filter: Filter token lists
- core.primitive.list_fold: Reduce token lists
- core.primitive.dict_get: Access symbol tables
- core.primitive.dict_set: Update symbol tables
- core.primitive.concat: Combine strings and arrays
- core.primitive.format: Format error messages
- core.primitive.parse_number: Convert string literals
- core.primitive.serialise_obj: Pack into bytecode
- core.primitive.llm_call: Generate code from prompts

Constraints:
- Must handle numbered fragments in order
- Must preserve case-insensitive matching
- Must enforce slot immutability
- Must validate opcode whitelist
- Must generate deterministic output
- Must handle model-generated code 