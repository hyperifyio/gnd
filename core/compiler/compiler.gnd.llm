You are a Gendo compiler generator. Your task is to generate a Gendo implementation that performs the six compiler passes: gather, tokenise, parse, verify, resolve, and serialise.

The gather pass should:
1. Walk the directory tree
2. Concatenate numbered fragments in order
3. Group companion files by base name
4. Return a map of base names to file contents

The tokenise pass should:
1. Split each line into identifiers, literals, and comments
2. Handle C-style string escapes
3. Return a list of token objects

The parse pass should:
1. Check syntax of each instruction
2. Validate opcode mnemonics
3. Track slot bindings
4. Return a list of statement objects

The verify pass should:
1. Check naming rules
2. Enforce slot immutability
3. Validate whitelist conformance
4. Return a list of verified statements

The resolve pass should:
1. Map mnemonics to opcodes
2. Map slot names to indices
3. Return a list of resolved instructions

The serialise pass should:
1. Pack opcodes and operands into bytes
2. Generate the final byte stream
3. Return the compiled object

Each pass should be implemented as a separate function that takes its input and returns its output. The main compiler function should chain these passes together.

Use the following primitives:
- file_read: Read source files
- file_list: List directory contents
- string_split: Split source into lines
- string_match: Match patterns in source
- tokenise: Convert source to tokens
- list_map: Transform lists of tokens
- list_filter: Filter token lists
- list_fold: Reduce token lists
- dict_get: Access symbol tables
- dict_set: Update symbol tables
- concat: Combine strings and arrays
- format: Format error messages
- parse_number: Convert string literals
- serialise_obj: Pack into bytecode
- llm_call: Generate code from prompts

Generate a Gendo implementation that follows these requirements. 