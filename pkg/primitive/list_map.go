package primitive; import ("fmt"; "reflect"); func ListMap(list interface{}, fnToken string) (interface{}, error) { v := reflect.ValueOf(list); if v.Kind() != reflect.Slice && v.Kind() != reflect.Array { return nil, fmt.Errorf("input is not a list: %v", v.Kind()) }; result := reflect.MakeSlice(v.Type(), v.Len(), v.Len()); for i := 0; i < v.Len(); i++ { fn, err := getFunction(fnToken); if err != nil { return nil, fmt.Errorf("invalid function token %q: %w", fnToken, err) }; args := []reflect.Value{v.Index(i)}; results := fn.Call(args); if len(results) > 1 && !results[1].IsNil() { return nil, results[1].Interface().(error) }; result.Index(i).Set(reflect.ValueOf(results[0].Interface())) }; return result.Interface(), nil }
