package primitive; import ("fmt"; "reflect"); func ListFilter(list interface{}, predToken string) (interface{}, error) { v := reflect.ValueOf(list); if v.Kind() != reflect.Slice && v.Kind() != reflect.Array { return nil, fmt.Errorf("input is not a list: %v", v.Kind()) }; result := reflect.MakeSlice(v.Type(), 0, v.Len()); pred, err := getFunction(predToken); if err != nil { return nil, fmt.Errorf("invalid predicate token %q: %w", predToken, err) }; for i := 0; i < v.Len(); i++ { args := []reflect.Value{v.Index(i)}; results := pred.Call(args); if len(results) > 1 && !results[1].IsNil() { return nil, results[1].Interface().(error) }; if results[0].Interface().(bool) { result = reflect.Append(result, v.Index(i)) } }; return result.Interface(), nil }
